#!/bin/bash

################################################################
# This program is used to manage basic commands for
# managing a project, such as git.
# Created by: Avery Reed on 2/14/17
# Last Edited by: Avery Reed 2/16/17
################################################################

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  echo "push or -p - push everything or specified file"
  echo "test or -t - build and test engine and sample project"
  echo "update or -u - update get branch from main"
  echo "setup or -s - make it so you can run the program without ./, it also works everywhere, also updates it"
  echo "create or -c - create a git branch"
  echo "install or -i - install missing dependicies"
  echo "engine or -e - rebuild engine"
  echo "game or -g - build game based on current engine build"
  echo "clean or -cl - clean out all built files and engine library"
  echo "In the works:"
  echo "reg or -r - CAN: register git info like username, email, and CANNOT YET:(need to add) key"
  echo "check or -cf - to check if the installed version is the newest version"
  echo "conf or -c - reconfigure makefile #in the works"
  echo "debug or -d - compile program and run it in debug mode"
elif [ "$1" == "push" ] || [ "$1" == "-p" ]; then
  if [ "$2" != NULL ]; then
    git add $2
  else
    git add *
  fi
  echo "What did you change:"
  read change
  git commit -m "$change"
  git config --global push.defualt simple
  git push
elif [ "$1" == "test" ] || [ "$1" == "-t" ]; then
  cd ArchGE
  g++ -c *.cpp
  ar rvs ArchGE.a *.o
  rm *.o*
  cd ..
  g++ main.cpp ArchGE/ArchGE.a -lSDL2 -lSDL2_ttf -lSDL2_image
  ./a.out
  rm *.o*
elif [ "$1" == "engine" ] || [ "$1" == "-e" ]; then
  cd ArchGE
  g++ -c *.cpp
  ar rvs ArchGE.a *.o
  rm *.o
  cd ..
elif [ "$1" == "game" ] || [ "$1" == "-g" ]; then
  if [ "$2" != NULL ]; then
    g++ main.cpp ArchGE/ArchGE.a -lSDL2 -lSDL2_ttf -lSDL2_image
  else #THIS DOESNT WORK ... IDK ... I'LL FIX IT LATER
    g++ main.cpp ArchGE/ArchGE.a -o "$2" -lSDL2 -lSDL2_ttf -lSDL2_image
  fi
elif [ "$1" == "clean" ] || [ "$1" == "-cl" ]; then
  rm *.o*
  cd ArchGE
  rm *.o*
  rm *.a
  cd ..
elif [ "$1" == "conf" ] || [ "$1" == "-cf" ]; then
  #NEED TO FINISH THIS
  echo "This is still being worked on"
  #echo "Configuring..."
  #make clean
  #touch .cache/mf
  #echo "################################################################" >> .cache/mf
  #echo "# This makefile is for the temp main file for testing purposes." >> .cache/mf
  #echo "# Created by: Avery Reed on 2/14/17" >> .cache/mf
  #echo "# Last Edited by: Avery Reed `date`" >> .cache/mf
  #echo "################################################################" >> .cache/mf
  #echo "" >> .cache/mf
  #echo "FLAGS = -lSDL2" >> .cache/mf
  #echo "" >> .cache/mf
  #echo "################################################################" >> .cache/mf
  #echo "# Build Game" >> .cache/mf
  #echo "################################################################" >> .cache/mf
elif [ "$1" == "update" ] || [ "$1" == "-u" ]; then
  git status
  git pull
elif [ "$1" == "setup" ] || [ "$1" == "-s" ]; then
  echo "You should only do this from the actual program, (./manage), not from the path."
  echo -n "Are you sure you want to add/update the command 'manage' to your path? (y/n): "
  read ans
  if [ "$ans" == "y" ]; then
    echo "Ok. Adding manage to your path..."
    #export PATH=$PATH:$PWD
    #move to bin
    sudo cp manage /usr/local/bin/
    sudo chmod a+x /usr/local/bin/manage
    echo "Completed. You can now run wihtout ./ and from anywhere."
  fi
elif [ "$1" == "create" ] || [ "$1" == "-c" ]; then
  echo -n "Would you like to clone a branch or make a new branch (c/n): "
  read ans
  if [ "$ans" == "c" ]; then
    echo "Okay. What is the location of the repo to clone:"
    read cl
    git clone $cl
  elif [ "$ans" == "n" ]; then
    echo -n "Is this the current directory? If not name the directory (y/new name): "
    read ans
    if [ "$ans" == "y" ]; then
      echo "Creating $ans branch"
      git init
    else
      echo "Making $ans directory"
      mkdir $ans
      cd $ans
      echo "Creating $ans branch"
      git init
      cd ..
    fi
  else
    echo "Not an option."
  fi
elif [ "$1" == "debug" ] || [ "$1" == "-d" ]; then
  echo "THIS MAY NOT WORK YET. - JUST ENTER q TO QUIT"
  make clean
  make
  gdb ./a.out
  make clean
elif [ "$1" == "install" ] || [ "$1" == "-i" ]; then
  sudo apt-get install git
  sudo apt-get install g++
  sudo apt-get install gdb
  sudo apt-get install libsdl2-2.0-0
  sudo apt-get install libsdl2-ttf-2.0-0 libsdl2-ttf-dbg libsdl2-ttf-dev
elif [ "$1" == "reg" ] || [ "$1" == "-r" ]; then
  echo -n "User Name: "
  read un
  echo -n "Email: "
  read em
  git config --global user.name "$un"
	git config --global user.email $em
  echo "(key creation coming soon)"
else
  echo "No input value"
  echo "-h or --help for help"
fi
